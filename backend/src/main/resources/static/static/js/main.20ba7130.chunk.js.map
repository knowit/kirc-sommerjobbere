{"version":3,"sources":["logo.svg","MessageList.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","_","Message","props","msgRef","React","createRef","this","current","setAttribute","style","ref","message","Component","MessageList","state","data","btmDivRef","timerID","setInterval","updateMessages","scrollToBottom","scrollIntoView","behavior","a","get","headers","response","isEqual","setState","console","error","ISOString","Date","toLocaleString","listStyleType","map","datum","margin","getReadableDate","timestamp","nickname","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAAe,I,wECGTA,EAAQC,EAAQ,IAClBC,EAAID,EAAQ,I,IAcVE,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,OAASC,IAAMC,YAFH,E,qDAKnB,WACEC,KAAKH,OAAOI,QAAQC,aAAa,QAASF,KAAKJ,MAAMO,S,gCAGvD,WACEH,KAAKH,OAAOI,QAAQC,aAAa,QAASF,KAAKJ,MAAMO,S,oBAGvD,WACE,OACE,sBAAMC,IAAKJ,KAAKH,OAAhB,SAAyBG,KAAKJ,MAAMS,c,GAhBpBP,IAAMQ,WAiFbC,E,kDA1Db,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CAAEC,KAAM,IACrB,EAAKC,UAAYZ,IAAMC,YAHN,E,qDAMnB,WAAqB,IAAD,OAClBC,KAAKW,QAAUC,aAAY,kBAAM,EAAKC,mBAAkB,KACxDb,KAAKc,mB,gCAGP,WACEd,KAAKc,mB,4BAGP,WACEd,KAAKU,UAAUT,QAAQc,eAAe,CAACC,SAAU,a,mEAGnD,4BAAAC,EAAA,+EAE2BzB,EAAM0B,IAxDvB,oCAwDgC,CAAEC,QAAS,KAFrD,OAEUC,EAFV,OAGS1B,EAAE2B,QAAQD,EAASX,KAAMT,KAAKQ,MAAMC,OACvCT,KAAKsB,SAAS,CACZb,KAAMW,EAASX,OALvB,gDASIc,QAAQC,MAAR,MATJ,yD,mFAaA,SAAgBC,GAEd,OADW,IAAIC,KAAKD,GACRE,eAAe,W,oBAG7B,WAAU,IAAD,OACP,OACE,qCACA,sCACA,oBAAIxB,MAAO,CAACyB,cAAe,QAA3B,SACG5B,KAAKQ,MAAMC,KAAKoB,KAAI,SAACC,GAAD,OACnB,+BAGE,uBAAM3B,MAAO,CAAC4B,OAAQ,OAAtB,cAAgC,EAAKC,gBAAgBF,EAAMG,WAA3D,OACA,qCAA4B,OAAnBH,EAAMI,SAAoB,QAAUJ,EAAMI,SAAnD,SACA,cAAC,EAAD,CAAS/B,MAAO2B,EAAM3B,MAAOE,QAASyB,EAAMzB,QAAS8B,GAAIL,EAAMK,OAJ1DL,EAAMK,SAQjB,qBAAK/B,IAAKJ,KAAKU,mB,GArDKZ,IAAMQ,WC7BjB8B,MANf,WACE,OACE,cAAC,EAAD,KCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.20ba7130.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport Style from 'style-it';\r\n\r\nconst axios = require(\"axios\");\r\nvar _ = require('lodash')\r\n\r\nconst url = \"http://35.157.57.155:80/messages/\";\r\n\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n}\r\n\r\nfunction getRandomFontSizeCSS() {\r\n  return \"font-size: \" + getRndInteger(12, 48) + \"px;\"\r\n}\r\n\r\n\r\nclass Message extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.msgRef = React.createRef()\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.msgRef.current.setAttribute('style', this.props.style);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.msgRef.current.setAttribute('style', this.props.style);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <span ref={this.msgRef}>{this.props.message}</span>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass MessageList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data: [] };\r\n    this.btmDivRef = React.createRef()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => this.updateMessages(), 1000);\r\n    this.scrollToBottom()\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom()\r\n  }\r\n\r\n  scrollToBottom() {\r\n    this.btmDivRef.current.scrollIntoView({behavior: 'smooth'})\r\n  }\r\n\r\n  async updateMessages() {\r\n    try {\r\n      const response = await axios.get(url, { headers: {} });\r\n      if (!_.isEqual(response.data, this.state.data)) {\r\n        this.setState({\r\n          data: response.data,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  getReadableDate(ISOString) {\r\n    let date = new Date(ISOString)\r\n    return date.toLocaleString(\"no-NO\")\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <h1>KIRC</h1>\r\n      <ul style={{listStyleType: \"none\"}}>\r\n        {this.state.data.map((datum) => (\r\n          <li\r\n            key={datum.id}\r\n          >\r\n            <span style={{margin: \"5px\"}}>[{this.getReadableDate(datum.timestamp)}]</span>\r\n            <span >[{datum.nickname === null ? \"Guest\" : datum.nickname}]: </span>\r\n            <Message style={datum.style} message={datum.message} id={datum.id}></Message>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div ref={this.btmDivRef}></div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageList;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport MessageList from './MessageList'\n\n\nfunction App() {\n  return (\n    <MessageList />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}